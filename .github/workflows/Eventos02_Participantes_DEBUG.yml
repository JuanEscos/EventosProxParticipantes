name: Eventos02_Participantes_DEBUG

on:
  schedule:
    - cron: '1 4 * * *'  # Ejecutar diariamente a las 04:01 UTC
  workflow_dispatch:      # Permitir ejecución manual

jobs:
  participants_debug:
    runs-on: ubuntu-22.04
    env:
      TZ: Europe/Madrid
      HEADLESS: "true"
      OUT_DIR: "./output"
      PER_EVENT_MAX_S: "240"
      MAX_RUNTIME_MIN: "40"
      LIMIT_EVENTS: "2"             # ajusta si quieres
      DEBUG_PARTICIPANTS: "1"       # <– activa debug

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install Chrome & Chromedriver
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y wget gnupg unzip ca-certificates curl
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          CHROME_VERSION=$(google-chrome-stable --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
          CHROMEDRIVER_URL="https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/${CHROME_VERSION}/linux64/chromedriver-linux64.zip"
          if wget -q --spider "$CHROMEDRIVER_URL"; then
            wget -q -O chromedriver.zip "$CHROMEDRIVER_URL"
            unzip -o chromedriver.zip
            sudo mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
            sudo chmod +x /usr/local/bin/chromedriver
            rm -rf chromedriver.zip chromedriver-linux64
          else
            sudo apt-get install -y chromium-chromedriver
            sudo ln -sf /usr/bin/chromedriver /usr/local/bin/chromedriver
          fi
          which google-chrome-stable && google-chrome-stable --version
          which chromedriver && chromedriver --version

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install webdriver-manager || true

      - name: Ensure output dirs
        run: |
          mkdir -p "${OUT_DIR}"
          mkdir -p "${OUT_DIR}/participants"

      - name: Ensure 01events.json (pull from FTP or generate)
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
          FLOW_EMAIL: ${{ secrets.FLOW_EMAILRQ }}
          FLOW_PASS: ${{ secrets.FLOW_PASSRQ }}
          HEADLESS: "true"
          MAX_SCROLLS: "12"
          SCROLL_WAIT_S: "2.0"
        run: |
          set -e
          if [ -f "./output/01events.json" ]; then
            echo "✔ ./output/01events.json ya existe"
          else
            if [ -n "$FTP_SERVER" ] && [ -n "$FTP_USERNAME" ] && [ -n "$FTP_PASSWORD" ] && [ -n "$FTP_REMOTE_DIR" ]; then
              REMOTE_DIR="${FTP_REMOTE_DIR}/Competiciones/EventosProx/Flow/data"
              BASE_URL="ftp://${FTP_SERVER}${REMOTE_DIR}"
              echo "Descargando de ${BASE_URL}/01events.json"
              curl --fail --ssl-reqd \
                   --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
                   -o "./output/01events.json" \
                   "${BASE_URL}/01events.json" || true
            fi
            if [ ! -f "./output/01events.json" ]; then
              echo "Generando 01events.json (flow_events.py)"
              python ./flow_events.py
            fi
            [ -f "./output/01events.json" ] || (echo "Falta 01events.json" && exit 1)
          fi

      - name: Run participants scraper (DEBUG)
        timeout-minutes: 90
        env:
          FLOW_EMAIL: ${{ secrets.FLOW_EMAILRQ }}
          FLOW_PASS:  ${{ secrets.FLOW_PASSRQ }}
        run: |
          echo "=== EXTRAER PARTICIPANTES (DEBUG) ==="
          python ./flow_participants_debug.py
          echo "=== FIN EXTRAER PARTICIPANTES ==="
          ls -la "${OUT_DIR}" || true
          ls -la "${OUT_DIR}/participants" || true

      - name: Quick sanity check
        shell: bash
        run: |
         echo "Conteo de participantes:"
         python - <<'PY'
         import json, sys
         from pathlib import Path

         p = Path("./output/02participants.json")
         if p.exists():
           data = json.loads(p.read_text(encoding="utf-8"))
           print("Total participantes:", len(data))
         if data:
           sample = data[0]
           print("Ejemplo:", {k: sample.get(k) for k in ("event_id","dorsal","guia","perro","club")})
         else:
           print("No existe 02participants.json")
           sys.exit(1)
      PY


      - name: Compress outputs (incluye debug)
        run: |
          set -e
          gzip -9 -c "./output/02participants.json" > "./output/02participants.json.gz"
          if [ -f "./output/02participants_debug.json" ]; then
            gzip -9 -c "./output/02participants_debug.json" > "./output/02participants_debug.json.gz"
          fi
          shopt -s nullglob
          for f in ./output/participants/02p_*.json; do
            gzip -9 -c "$f" > "${f}.gz"
          done
          ls -la ./output/*.gz || true
          ls -la ./output/participants/*.gz || true

      - name: Upload artifacts (incluye debug)
        uses: actions/upload-artifact@v4
        with:
          name: participantes-debug
          path: |
            ./output/02participants.json
            ./output/02participants.json.gz
            ./output/02participants_debug.json
            ./output/02participants_debug.json.gz
            ./output/participants/*.json
            ./output/participants/*.json.gz
          retention-days: 7

      - name: Upload to FTP (opcional, incluye debug)
        if: always()
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -e
          if [ -z "$FTP_SERVER" ] || [ -z "$FTP_USERNAME" ] || [ -z "$FTP_PASSWORD" ] || [ -z "$FTP_REMOTE_DIR" ]; then
            echo "Variables FTP no configuradas; omito FTP."
            exit 0
          fi
          REMOTE_DIR="${FTP_REMOTE_DIR}/Competiciones/EventosProx/Flow/data"
          BASE_URL="ftp://${FTP_SERVER}${REMOTE_DIR}"

          upload() {
            local src="$1"
            local dst="$2"
            for i in 1 2 3; do
              curl --fail --ssl-reqd --ftp-create-dirs --disable-epsv --ftp-skip-pasv-ip \
                   --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
                   --upload-file "$src" "${BASE_URL}/$dst" && return 0
              echo "Reintento $i falló subiendo $src → $dst; esperando…"
              sleep 2
            done
            return 1
          }

          upload "./output/02participants.json.gz" "02participants.json.gz" || exit 1
          upload "./output/02participants.json"    "02participants.json"    || true

          if [ -f "./output/02participants_debug.json.gz" ]; then
            upload "./output/02participants_debug.json.gz" "02participants_debug.json.gz" || true
          fi
          if [ -f "./output/02participants_debug.json" ]; then
            upload "./output/02participants_debug.json"    "02participants_debug.json"    || true
          fi

          shopt -s nullglob
          for f in ./output/participants/02p_*.json.gz; do
            base=$(basename "$f")
            upload "$f" "participants/${base}" || echo "Fallo subiendo ${base}"
          done

