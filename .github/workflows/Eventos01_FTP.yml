name: Eventos01_FTP

on:
  schedule:
    - cron: '1 4 * * *'  # Ejecutar diariamente a las 04:01 UTC
  workflow_dispatch:      # Permitir ejecuci√≥n manual

jobs:
  scrape-and-upload:
    runs-on: ubuntu-22.04
    env:
      TZ: Europe/Madrid
      HEADLESS: "true"
      MAX_SCROLLS: "15"
      SCROLL_WAIT_S: "3.0"
      OUT_DIR: "./output"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - name: Install Chrome and ChromeDriver
      run: |
        set -e
        sudo apt-get update
        sudo apt-get install -y wget gnupg unzip ca-certificates curl

        # Instalar Chrome estable
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        CHROME_VERSION=$(google-chrome-stable --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
        echo "Chrome version: $CHROME_VERSION"

        # Descargar ChromeDriver exacto (Chrome for Testing)
        CHROMEDRIVER_URL="https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/${CHROME_VERSION}/linux64/chromedriver-linux64.zip"
        if wget -q --spider "$CHROMEDRIVER_URL"; then
          echo "Descargando ChromeDriver ${CHROME_VERSION}"
          wget -q -O chromedriver.zip "$CHROMEDRIVER_URL"
          unzip -o chromedriver.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
          sudo chmod +x /usr/local/bin/chromedriver
          rm -rf chromedriver.zip chromedriver-linux64
        else
          echo "No se encontr√≥ ChromeDriver exacto; usando fallback de apt"
          sudo apt-get install -y chromium-chromedriver
          sudo ln -sf /usr/bin/chromedriver /usr/local/bin/chromedriver
        fi

        which google-chrome-stable
        which chromedriver
        google-chrome-stable --version
        chromedriver --version

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Por si tu requirements no incluye webdriver-manager, inst√°lalo
        pip install webdriver-manager || true

    - name: Create output directory
      run: mkdir -p "${OUT_DIR}"

    - name: Run scraper (01events only)
      timeout-minutes: 60
      env:
        TZ: Europe/Madrid
        HEADLESS: "true"
        MAX_SCROLLS: "12"
        SCROLL_WAIT_S: "2.0"
        FLOW_EMAIL: ${{ secrets.FLOW_EMAILRQ }}
        FLOW_PASS:  ${{ secrets.FLOW_PASSRQ }}
      run: |
        echo "=== EJECUTANDO SCRAPER 01events ==="
        python ./flow_events.py
        echo "=== SCRAPER COMPLETADO ==="
        ls -la "${OUT_DIR}"

    - name: Verify generated files (01events only)
      run: |
        echo '=== VERIFICANDO 01events ==='
        if [ -f "./output/01events.json" ]; then
          size=$(stat -c%s "./output/01events.json")
          echo "‚úÖ 01events.json ENCONTRADO (${size} bytes)"
        else
          echo "‚ùå 01events.json NO ENCONTRADO"
          exit 1
        fi

    - name: Compress JSON for FTP (01events)
      run: |
        echo "=== COMPRIMIENDO 01events ==="
        gzip -9 -c "./output/01events.json" > "./output/01events.json.gz"
        ls -la ./output/*.gz

    - name: Upload compressed file to FTP (01events)
      env:
        FTP_SERVER: ${{ secrets.FTP_SERVER }}
        FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
        FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
      run: |
        echo '=== SUBIENDO 01events.json(.gz) POR FTP ==='

        if [ -z "$FTP_SERVER" ] || [ -z "$FTP_USERNAME" ] || [ -z "$FTP_PASSWORD" ]; then
          echo "‚ùå ERROR: Variables FTP no configuradas correctamente"
          exit 1
        fi

        REMOTE_DIR="${FTP_REMOTE_DIR}/Competiciones/EventosProx/Flow/data"
        BASE_URL="ftp://${FTP_SERVER}${REMOTE_DIR}"

        # Subir comprimido
        if [ -f "./output/01events.json.gz" ]; then
          echo "üì§ Subiendo 01events.json.gz"
          curl --fail \
               --ssl-reqd \
               --ftp-create-dirs \
               --disable-epsv \
               --ftp-skip-pasv-ip \
               --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
               --upload-file "./output/01events.json.gz" \
               "${BASE_URL}/01events.json.gz" && \
          echo "‚úÖ 01events.json.gz subido"
        else
          echo "‚ùå No existe ./output/01events.json.gz"
        fi

        # Subir sin comprimir (copia ‚Äúliviana‚Äù)
        if [ -f "./output/01events.json" ]; then
          echo "üì§ Subiendo 01events.json (sin comprimir)"
          curl --fail \
               --ssl-reqd \
               --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
               --upload-file "./output/01events.json" \
               "${BASE_URL}/01events.json" && \
          echo "‚úÖ 01events.json subido"
        fi

    - name: Create backup directory
      run: mkdir -p ./backup

    - name: Backup uncompressed (01events)
      run: |
        cp ./output/01events.json ./backup/
        echo "Backup creado en ./backup/01events.json"

    - name: Upload artifacts (01events)
      uses: actions/upload-artifact@v4
      with:
        name: 01events-json
        path: |
          ./backup/01events.json
          ./output/01events.json.gz
        retention-days: 7

    - name: Debug on failure
      if: failure()
      run: |
        echo "=== DEBUG FAILURE ==="
        ls -la ./output/ || true
        ls -la ./backup/ || true
        which google-chrome-stable && google-chrome-stable --version || true
        which chromedriver && chromedriver --version || true
