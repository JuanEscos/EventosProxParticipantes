name: EventProxPart (FlowAgility eventos + participantes)

on:
  workflow_dispatch:
    inputs:
      limit_events:
        description: "Máximo de eventos a procesar (0 = sin límite)"
        required: false
        default: "35"
      max_runtime_min:
        description: "Cortar ordenadamente a los N minutos (0 = sin límite)"
        required: false
        default: "25"
  schedule:
    # 03:40 UTC ≈ 05:40 Europe/Madrid (según DST)
    - cron: "40 3 * * *"

permissions:
  contents: read

concurrency:
  group: eventproxpart-${{ github.ref }}
  cancel-in-progress: false

jobs:
  run-scrape:
    runs-on: ubuntu-24.04
    timeout-minutes: 90

    env:
      TZ: Europe/Madrid
      PYTHONUNBUFFERED: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"

      # ---- Scraper ENV ----
      HEADLESS: "true"
      INCOGNITO: "true"
      OUT_DIR: "./output"
      MAX_SCROLLS: "12"
      SCROLL_WAIT_S: "2.0"
      LIMIT_EVENTS: "${{ github.event.inputs.limit_events || '35' }}"
      MAX_RUNTIME_MIN: "${{ github.event.inputs.max_runtime_min || '25' }}"

      # Throttling + resume
      THROTTLE_EVENT_S: "3.0"
      THROTTLE_PAGE_MIN_S: "1.2"
      THROTTLE_PAGE_MAX_S: "2.5"
      THROTTLE_TOGGLE_MIN_S: "0.9"
      THROTTLE_TOGGLE_MAX_S: "2.2"
      AUTO_SAVE_EVERY: "10"
      RESUME: "true"
      RESUME_FILE: ""

      # Credenciales Flow (secrets)
      FLOW_EMAILRq: "${{ secrets.FLOW_EMAILRQ }}"
      FLOW_PASSRq: "${{ secrets.FLOW_PASSRQ }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Install chromedriver
        uses: nanasess/setup-chromedriver@v2

      - name: Show Chrome versions
        run: |
          google-chrome --version || true
          google-chrome-stable --version || true
          chromedriver --version || true

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install selenium webdriver-manager beautifulsoup4 python-dotenv
          fi

      - name: Prepare output dir
        run: |
          mkdir -p "${OUT_DIR}"
          echo "OUT_DIR contents (before):"
          ls -la "${OUT_DIR}" || true
          
      - name: Syntax check
        run: |
          python -m py_compile ./02EventosProxParticipantesGitHubGPT.py
    
      - name: Run Python scraper (events + participants)
        timeout-minutes: 60
        env:
          HEADLESS: "${{ env.HEADLESS }}"
          INCOGNITO: "${{ env.INCOGNITO }}"
          OUT_DIR: "${{ env.OUT_DIR }}"
          MAX_SCROLLS: "${{ env.MAX_SCROLLS }}"
          SCROLL_WAIT_S: "${{ env.SCROLL_WAIT_S }}"
          LIMIT_EVENTS: "${{ env.LIMIT_EVENTS }}"
          MAX_RUNTIME_MIN: "${{ env.MAX_RUNTIME_MIN }}"
          THROTTLE_EVENT_S: "${{ env.THROTTLE_EVENT_S }}"
          THROTTLE_PAGE_MIN_S: "${{ env.THROTTLE_PAGE_MIN_S }}"
          THROTTLE_PAGE_MAX_S: "${{ env.THROTTLE_PAGE_MAX_S }}"
          THROTTLE_TOGGLE_MIN_S: "${{ env.THROTTLE_TOGGLE_MIN_S }}"
          THROTTLE_TOGGLE_MAX_S: "${{ env.THROTTLE_TOGGLE_MAX_S }}"
          AUTO_SAVE_EVERY: "${{ env.AUTO_SAVE_EVERY }}"
          RESUME: "${{ env.RESUME }}"
          RESUME_FILE: "${{ env.RESUME_FILE }}"
          FLOW_EMAILRq: "${{ env.FLOW_EMAILRq }}"
          FLOW_PASSRq: "${{ env.FLOW_PASSRq }}"
        run: |
          echo "=== EJECUTANDO SCRAPER ==="
          python ./02EventosProxParticipantesGitHubGPT.py --module all --limit-events "${LIMIT_EVENTS}"
          echo "=== SCRAPER COMPLETADO ==="

      - name: Quick quality report (JSON completeness)
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const p = './output/participantes_detallados.json';

            if (!fs.existsSync(p)) {
              core.info('No existe ./output/participantes_detallados.json');
            } else {
              let data;
              try {
                data = JSON.parse(fs.readFileSync(p, 'utf8'));
              } catch (e) {
                core.info(`No se pudo leer ${p}: ${e}`);
                return;
              }

              let rows = 0;
              const counts = {};
              for (const ev of (data || [])) {
                for (const r of (ev.participantes || [])) {
                  rows++;
                  for (const [k, v] of Object.entries(r)) {
                    if (!counts[k]) counts[k] = { empty: 0, total: 0 };
                    counts[k].total++;
                    if (!String(v ?? '').trim()) counts[k].empty++;
                  }
                }
              }

              core.info(`Participantes totales: ${rows}`);
              for (const k of Object.keys(counts).sort()) {
                const t = counts[k].total;
                const e = counts[k].empty;
                const pct = t ? (e * 100 / t).toFixed(1) : '0.0';
                core.info(`${k.padEnd(22)} vacíos: ${String(e).padStart(4)}/${String(t).padStart(4)}  (${pct}%)`);
              }
            }

      - name: Verify generated files
        run: |
          echo '=== VERIFICANDO ARCHIVOS GENERADOS ==='
          ls -la ./output/ || true

          MUST_HAVE=("01events.json")
          ONE_OF=("02info.json" "participantes_detallados.json")

          missing=0
          for file in "${MUST_HAVE[@]}"; do
            if [ -f "./output/$file" ]; then
              sz=$(stat -c%s "./output/$file")
              echo "✅ $file: ENCONTRADO (${sz} bytes)"
            else
              echo "❌ $file: NO ENCONTRADO"
              missing=$((missing+1))
            fi
          done

          found_optional=0
          for opt in "${ONE_OF[@]}"; do
            if [ -f "./output/$opt" ]; then
              sz=$(stat -c%s "./output/$opt")
              echo "✅ $opt: ENCONTRADO (${sz} bytes)"
              found_optional=1
            else
              echo "⚠️  $opt: no encontrado"
            fi
          done

          if [ $missing -eq 0 ] && [ $found_optional -eq 1 ]; then
            echo "✅ Archivos mínimos presentes"
          else
            echo "❌ Faltan archivos requeridos (01events.json) o ninguno de (02info.json|participantes_detallados.json)"
            exit 1
          fi

      - name: Create backup directory
        run: mkdir -p ./backup

      - name: Backup uncompressed files
        run: |
          echo "=== CREANDO BACKUP LOCAL ==="
          [ -f ./output/01events.json ] && cp ./output/01events.json ./backup/ || true
          [ -f ./output/02info.json ] && cp ./output/02info.json ./backup/ || true
          [ -f ./output/participantes_detallados.json ] && cp ./output/participantes_detallados.json ./backup/ || true
          echo "Backup creado en ./backup/"
          ls -la ./backup/ || true

      - name: Upload backup as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: json-backup-uncompressed
          path: ./backup/*.json
          if-no-files-found: warn
          retention-days: 7

      - name: Upload compressed files as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: json-compressed
          path: ./output/*.gz
          if-no-files-found: warn
          retention-days: 3

      - name: Upload participant debug HTML (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: participants-debug-html
          path: ./output/debug_part_*.html
          if-no-files-found: ignore
          retention-days: 5

      - name: Debug on failure
        if: failure()
        run: |
          echo "=== DEBUGGING FAILURE ==="
          echo "output/:"
          ls -la ./output/ 2>/dev/null || echo "No output directory"
          echo "backup/:"
          ls -la ./backup/ 2>/dev/null || echo "No backup directory"
          echo "=== CHROME ==="
          which google-chrome || true
          which google-chrome-stable || true
          which chromedriver || true
          echo "=== FILE SIZES ==="
          for f in ./output/*.json ./output/*.gz; do
            [ -f "$f" ] && echo "$(basename "$f"): $(stat -c%s "$f") bytes"
          done || true
